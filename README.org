#+TITLE: Nore Emacs
#+AUTHOR: Junjie Mars
#+STARTUP: overview
#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL: 2
#+REVEAL_SLIDE_NUMBER: h
#+REVEAL_THEME: moon
#+BEGIN_COMMENT
#+REVEAL_TRANS: cube
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.2
#+REVEAL_MAX_SCALE: 1.5
#+END_COMMENT
#+PROPERTY: header-args :exports code
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />


@@html:<img src="https://github.com/junjiemars/.emacs.d/actions/workflows/ci.yml/badge.svg" alt="Darwin, Linux and Windows"/>@@

* Quick start
  :PROPERTIES:
  :CUSTOM_ID: quick-start
  :END:

#+ATTR_HTML: :style text-align:left
It's works on Emacs version 22.1.1+ , provides more reasonable styles:
more organized code, more consistent, more cleaner and more
faster. You can run it on any environment Emacs itself runs on: GUI or
Terminal, even you can run multiple Emacs instances with different
version on the same machine at the same time.

#+REVEAL: split

- clone Nore Emacs from github
#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/.emacs.d.git ~/.emacs.d
#+END_SRC

- open Emacs, after Emacs compile all elisp files, then reopen Emacs
- want more functionalities see [[#recipe][Recipe]] section

#+ATTR_HTML: :style text-align:left
One more thing, it's best to remind you: take care, it's super fast.

#+ATTR_HTML: :style display:none
- [[#story][Story]]
- [[#recipe][Recipe]]
- [[#programming][Programming]]
- [[#troubleshoting][Troubleshoting]]
- [[#mnemonic][Mnemonic]]

* Story
  :PROPERTIES:
  :CUSTOM_ID: story
  :END:

#+ATTR_HTML: :style text-align:left
Emacs is the most powerful editor on the world there is no *one of*,
it's programmable, elegant and /self-documenting/.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
After my daily work being done more and more in Emacs, I know it's the
time to make Emacs being a part of my body and mind, not just open a
file, navigating, editing, and save it. So, I build Nore Emacs taking
the approach that Euclid did in his geometry.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Nore Emacs strives to be consitent, fast, stable and hack friendly,
which can be run and with consistent behaviors on wherever Emacs runs.

#+ATTR_HTML: :style display:none
- [[#principles][Principles]]
- [[#requirements][Requirements]]
- [[#where][Where]]
- [[#what][What]]
- [[#install][Install]]
- [[#organization][Organization]]

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Now, let's start from the Level Two. And one more thing: teach
yourself some little Elisp (@@html:<kbd>@@M-x i m Elisp@@html:</kbd>@@).

** Principles
   :PROPERTIES:
   :CUSTOM_ID: principles
   :END:

- *Adaptive*: run on any OS, GUI or TUI, from most recent Emacs's
  versions to ancient ones, and one Emacs's configuration suit for all
  coexisting Emacs on the same machine.
- *Consistent*: wherever and whenever you can play with Emacs always
  behaves in the same way.
- *Minimalism*: inside and outside and just load what's your need.

** Requirements
   :PROPERTIES:
   :CUSTOM_ID: requirements
   :END:

- Emacs 22.1.1+
- Keyboard+

** Where
   :PROPERTIES:
   :CUSTOM_ID: where
   :END:

- Linux, whatever GUI or TUI
- Darwin, whatever GUI or TUI
- Windows, whatever GUI or TUI
- Raspberry Pi and Docker container, etc.,
- Network or without Network
- One machine, multiple Emacs instances

** What
   :PROPERTIES:
   :CUSTOM_ID: what
   :END:

- You are the master of your Emacs, ...
- Navigating, finding, grepping in the same way wherever, ...
- Org Mode that's your new life, ...
- Amazing programming experiments, C, Lisp, ...
- It's a no-cost extension and git friendly infrastructure.

** Install
   :PROPERTIES:
   :CUSTOM_ID: install
   :END:

#+ATTR_HTML: :style text-align:left
Just one thing you need to do, clone it (just <500KB) to your =HOME=
directory:

#+BEGIN_SRC sh
git clone --depth=1 https://github.com/junjiemars/.emacs.d.git ~/.emacs.d
#+END_SRC

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
First run Nore Emacs, it should automatically do:
- byte compile elisp source files.
- install packages, if you allow it.

#+ATTR_HTML: :style text-align:left
After first run Nore Emacs, exit and then /reopen/ Emacs.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
On Windows, if you'd [[https://git-scm.com/downloads][Git-Bash]] installed but no Emacs, you are lucky, a
one line code will do it all for you and more: fix some Emacs' issue
for you, and you don't need run src_shell{git clone ...},

instead,

#+BEGIN_SRC sh
HAS_EMACS=1 bash <(curl https://raw.githubusercontent.com/junjiemars/kit/master/win/install-win-kits.sh)
#+END_SRC

#+ATTR_HTML: :style text-align:left
Now, it will works perfectly, but if you want to more control and more
features, such as themes, packages, and fonts etc., see next section:
[[#recipe][recipe]]

** Organization
   :PROPERTIES:
   :CUSTOM_ID: organization
   :END:

#+ATTR_HTML: :style text-align:left
Signify your Emacs HOME as =(emacs-home*)=.

#+ATTR_HTML: :style text-align:left
Your private configuration directory at =(emacs-home* "private/")=.
All things under it you can rename, move, delete.

#+ATTR_HTML: :style text-align:left
All Elisp files should be compiled, if you meet some trouble, a magic
interactive function =(clean-compiled-files)= should help,
run it and reopen the Emacs.

*** Directory

#+BEGIN_EXAMPLE
    (emacs-home*)
    ├── LICENSE
    ├── README.org
    ├── config (comment "all stuff here")
    ├── elpa (comment "installed packages")
    ├── init.el (comment "Emacs init file")
    ├── private (comment "your configuration can put here")
    │   ├── self-env-spec.el
    │   ├── self-package-spec.el
    │   ├── self-epilogue.el
    └── theme (comment "themes directory")
#+END_EXAMPLE

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Locate your spec via =(*self-paths*)=.

#+BEGIN_SRC emacs-lisp
;; Run order: :env-spec -> :package-spec -> :epilogue
;; You can point to your Gited Emacs' configuration repo.
;; Default samples `sample-self-*.el' in `(emacs-home* "config/")' directory.
;; :epilogue run in `after-init-hook'

(*self-paths* :put :package-spec
              (comment (emacs-home* "private/self-package-spec.el")))
(*self-paths* :put  :epilogue
              (comment (emacs-home* "private/self-epilogue.el")))
#+END_SRC

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Directories with =.= /prefix/ are for the modules that need store
configuration or cached files.

#+BEGIN_EXAMPLE
    (emacs-home*)
    ├── .backup
    ├── .bookmarks
    ├── .desktop
    ├── .dired
    ├── .eshell
    ├── .exec (comment "executable")
    ├── .ido
    ├── .mail
    ├── .save
    ├── .tags
    ├── .tramp
    └── (comment "more ...")

#+END_EXAMPLE

*** Naming

#+REVAL: split
#+ATTR_HTML: :style text-align:left
Introduce the rules of naming /files/ and /functions/.

#+REVEAL: split
**** Core Files Naming: single word and simple name.

#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── autoloads.el
    ├── basic.el
    ├── boot.el
    ├── chez.el
    ├── dicts.el
    ├── fns.el
    ├── gambit.el
    ├── graphic.el
    ├── gud-cdb.el
    ├── gud-lldb.el
    ├── guds.el
    ├── memory.el
    ├── module.el
		└── (comment "more ...")
#+END_EXAMPLE

#+REVEAL: split
**** Extension Naming

#+REVEAL: split
- /extension/ for Emacs builtin packages: =<package-name>s.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── shells.el
    ├── sockets.el
    └── tags.el
#+END_EXAMPLE

#+REVEAL: split
- /autoload extension/ for Emacs builtin packages:
  =on-<package-name>-autoload.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── on-cc-autoload.el
    ├── on-compile-autoload.el
    ├── on-dired-autoload.el
    ├── on-docview-autoload.el
    ├── on-edit-autoload.el
    ├── on-trans-autoload.el
    ├── on-eshell-autoload.el
    ├── on-eww-autoload.el
    ├── on-font-autoload.el
    ├── on-module.el
    └── (comment "more ...")
#+END_EXAMPLE

#+REVEAL: split
- /extension/ for /non/ Emacs builtin packages:
  =use-<package-name>-autoload.el=
#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── use-cider-autoload.el
    ├── use-cider.el
    ├── use-geiser-autoload.el
    ├── use-inf-clojure.el
    ├── use-lfe-autoload.el
    ├── use-lua-autoload.el
    ├── use-magit-autoload.el
    ├── use-slime-autoload.el
    ├── use-web-autoload.el
    └── (comment "more ...")
#+END_EXAMPLE

#+REVEAL: split
**** Sample Files Naming: =sample-self-*.el=

#+BEGIN_EXAMPLE
    (emacs-home* "config/")
    ├── sample-self-env-spec.el
    ├── sample-self-package-spec.el
    └── sample-self-epilogue.el
#+END_EXAMPLE

#+REVEAL: split
**** Functions Naming (χ denotes name)

#+REVEAL: split
- *v-χ* prefix: function or macro for versioned directory, such as
  =v-home*=
- *_χ_* prefix: function or macro only existing in compile-time,
  such as =_mark-thing@_=
- *χ​** or *χ*** suffix: extension of Emacs' builtin function or
  macro, such as =every*= and =assoc**=
- *χ%* suffix: macro be expanded at compile time, such as =v-home%=
- *χ!* suffix: function or macro with side-effects, such as
  =v-home!=
- *χ@* suffix: position related functions or macros, such as
  =mark-symbol@= and =mark-word@=

* Recipe
   :PROPERTIES:
   :CUSTOM_ID: recipe
   :END:

#+ATTR_HTML: :style display:none
- [[#theme][Theme]]
- [[#frame][Frame]]
- [[#recipe-shell][Shell]]
- [[#session][Session]]
- [[#network][Network]]
- [[#package][Package]]
- [[#indent][Indent]]
- [[#file][File]]
- [[#editing][Editing]]
- [[#keys][Keys]]

** Theme
    :PROPERTIES:
    :CUSTOM_ID: theme
    :END:

#+ATTR_HTML: :style text-align:left
Easy to switch themes, or try a new one.

#+ATTR_HTML: :style text-align:left
The =theme='s spec locate in =(*self-env-spec* :get :theme
:custom-theme-directory)=.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :theme
 (list :name nil ;; 'dracula
       :custom-theme-directory (emacs-home* "theme/")
       :compile nil ;; expert option
       :allowed nil))
#+END_SRC

#+REVEAL: split
- =:name= name of theme, does not need /-theme.el/ suffix
- =:custom-theme-directory= where custom theme files located
- =:compile= =t= compile theme, compiled theme more smooth and more
  faster if you had already confirmed the theme is secure.
- =:allowed= =t= enabled, =nil= disabled

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Using Emacs's builtin themes /tango-dark/ :

#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :theme
 (list :name 'tango-dark ;; 'dracula
       :custom-theme-directory (emacs-home* "theme/")
       :compile nil ;; expert option
       :allowed nil))
#+END_SRC

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/default-theme-on-windows.png][default theme]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dracula-theme-on-windows.png][dracula theme]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/tango-dark-theme-on-windows.png][tango-dark theme]]

** Frame
    :PROPERTIES:
    :CUSTOM_ID: frame
    :END:

#+ATTR_HTML: :style text-align:left
The =frame='s spec locate in =(*self-env-spec* :get :frame)= and for
GUI mode only.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :frame
 (list :initial `((fullscreen . fullheight))
       :default `((font . ,(if-platform% 'darwin
                               "Monaco-17"
                             (if-platform% 'windows-nt
                                 "Consolas-13"
                               "DejaVu Sans Mono-14"))))
       :frame-resize-pixelwise t
       :allowed t))
#+END_SRC

#+REVEAL: split
- =:name= string of font name
- =:size= integer of font size
- =:allowed= =t= enabled, =nil= disabled

** Glyph
    :PROPERTIES:
    :CUSTOM_ID: Glyph
    :END:

#+ATTR_HTML: :style text-align:left
The =glyph='s spec locate in =(*self-env-spec* :get :glyph)= and for
GUI mode only. It determines the appearance of =glyph= characters such
as [[https://en.wikipedia.org/wiki/CJK_characters][CJK]], etc., the default encoding of =glyph= is [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]].

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :glyph
 `((:name ,(if-platform% 'darwin
               "Hack"
             (if-platform% 'windows-nt
                 "Courier New"
               "DejaVu Sans Mono"))
          :size 17
          :scale nil
          :scripts (greek)
          :allowed t)
   (:name ,(if-platform% 'darwin
               "PingFang"
             (if-platform% 'windows-nt
                 "Microsoft YaHei"
               "Noto Sans"))
          :size 12
          :scale nil
          :scripts (han)
          :allowed nil)))
#+END_SRC

#+REVEAL: split
- =:name= string of font name
- =:size= integer of font size
- =:scale= number of scale ratio of glyph font, =nil= disabled
- =:scripts= list of script symbol for character
- =:allowed= =t= enabled, =nil= disabled

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/cjk-font-on-darwin.png][glyph font: CJK]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/monaco-font-on-darwin.png][Monaco font]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/consolas-font-on-windows.png][Consolas font]]

** Shell
    :PROPERTIES:
    :CUSTOM_ID: recipe-shell
    :END:

*** shell

#+ATTR_HTML: :style text-align:left
Suppport any =SHELL=, copying or spinning environment variables into
Emacs environment.

#+ATTR_HTML: :style text-align:left
The shell spec locate in =(*self-env-spec* :get :shell)=.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :shell
 (list :copy-vars `("PATH")
       :spin-vars nil                        ;; `(("ZZZ" . "123"))
       :options '("-i" "2>/dev/null")        ;; '("--login")
       :exec-path t
       :shell-file-name (or (executable-find% "zsh")
                            (executable-find% "bash"))
       :prompt (list :zsh "%n@%m %1~ %# "
                     :bash "\\u@\\h \\W \\$ ")
       :allowed nil))
#+END_SRC

#+REVEAL: split
- =:copy-vars= copy environment variables from shell into Emacs, that
  affects =eshell=, =shell= and =ansi-term=
- =:spin-vars= spin customized variables, only affects =eshell=
- =:options= a list of shell's options
- =:exec-path= copy =$PATH= or =%PATH%= to =exec-path=
#+REVEAL: split
- =:shell-file-name= where the shell program located
- =:prompt= unify shell prompt in =term= mode, via @@html:<kbd>@@C-c
  C-j@@html:</kbd>@@ then @@html:<kbd>@@M-x
  term-unify-shell-prompt@@html:</kbd>@@
- =:allowed= =t= allowed, =nil= disabled

*** eshell
    :PROPERTIES:
    :CUSTOM_ID: eshell
    :END:

#+ATTR_HTML: :style text-align:left
The =eshell= spec locate in =(*self-env-spec* :get :eshell)=. And
shared the copied environment variables =:copy-vars= with shell.

#+REVEAL: splitV
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :eshell
 (list :visual-commands '("mtr")
       :destroy-buffer-when-process-dies nil
       :visual-subcommands nil ;; '(("git" "log"))
       :visual-options nil
       :allowed t))
#+END_SRC

#+REVEAL: split
- =:visual-commands= @@html:<kbd>@@C-h-v eshell-visual-commands@@html:</kbd>@@
- =:destroy-buffer-when-process-dies= @@html:<kbd>@@C-h-v eshell-destroy-buffer-when-process-dies@@html:</kbd>@@
- =:visual-subcommands= @@html:<kbd>@@C-h-v eshell-visual-subcommands@@html:</kbd>@@
- =:visual-options= @@html:<kbd>@@C-h-v eshell-visual-options@@html:</kbd>@@
- =:allowed= =t= allowed, =nil= disabled

** Session
    :PROPERTIES:
    :CUSTOM_ID: session
    :END:

#+ATTR_HTML: :style text-align:left
The =desktop= spec locate in =(*self-env-spec* :get :desktop)=.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :desktop
 (list :files-not-to-save
       "\.t?gz$\\|\.zip$\\|\.desktop\\|~$\\|^/sudo:\\|^/ssh[x]?:\\|\.elc$"
       :buffers-not-to-save "^TAGS\\|\\.log"
       :modes-not-to-save
       '(dired-mode fundamental-mode eww-mode rmail-mode)
       :restore-eager 8
       :allowed t))
#+END_SRC

#+REVEAL: split
- =:files-not-to-save= @@html:<kbd>@@C-h-v desktop-files-not-to-save@@html:</kbd>@@
- =:buffers-not-to-save= @@html:<kbd>@@C-h-v desktop-buffers-not-to-save@@html:</kbd>@@
- =:modes-not-to-save= @@html:<kbd>@@C-h-v desktop-modes-not-to-save@@html:</kbd>@@
- =:restore-eager= @@html:<kbd>@@C-h-v desktop-restore-eager@@html:</kbd>@@
- =:allowed= =t= enabled, =nil= disabled

** Network
    :PROPERTIES:
    :CUSTOM_ID: network
    :END:

*** Socks

#+ATTR_HTML: :style text-align:left
Using socks proxy when installing packages or browsing web pages.

#+ATTR_HTML: :style text-align:left
The =socks= spec locate in =(*self-env-spec* :get :socks)=.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :socks
 (list :port 32000
       :server "127.0.0.1"
       :version 5
       :allowed nil))
#+END_SRC

#+REVEAL: split
- =:port= the port of socks proxy server
- =:server= the address of socks proxy server
- =:version= socks version
- =:allowed= =t= enabled, =nil= disabled

#+ATTR_HTML: :style text-align:left
If =:allowed t=, =url-gateway-method= should be switch to =socks= when
Emacs initializing. After Emacs initialization, you can =toggle-socks!=
and no matter =:allowed= is =t= or =nil=.

*** Network Utils

#+ATTR_HTML: :style text-align:left
Emacs comes with a lots of wrappers(=net-utils.el=) around the common
network utilities. Such as @@html:<kbd>@@M-x ping@@html:</kdb>@@ a
host. But =net-utils.el= has some inconveniences:

#+REVEAL: split
- If you want to =ping= with options you must set
  =ping-program-options= customizable variable.
- IPv6 supporting: on Unix-like OS there are individual program for
  IPv6, such as =ping6=, but on Windows OS just one =ping= program and
  with =-6= option.

#+ATTR_HTML: :style text-align:left I'd refined common interative
commands around =net-utils=, and named those commands with =*= prefix.
Using @@html:<kbd>@@C-u M-x *<command>@@html:</kdb>@@ you can set the
options for that <command>.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
The following interactive commands had been defined for Emacs22.1+
whatever OS you using:
- @@html:<kbd>@@M-x *arp@@html:</kdb>@@
- @@html:<kbd>@@M-x *dig@@html:</kbd>@@
- @@html:<kbd>@@M-x *ifconfig@@html:</kbd>@@
- @@html:<kbd>@@M-x *ping@@html:</kbd>@@
- @@html:<kbd>@@M-x *traceroute@@html:</kbd>@@

*** Browser
    :PROPERTIES:
    :CUSTOM_ID: browser
    :END:

- toggle external or internal browser: @@html:<kbd>@@M-x
  toggle-browser!@@html:</kdb>@@
- lookup web for symbol, word, etc.,: @@html:<kdb>@@M-s
  w@@html:</kdb>@@
- lookup online dictionaries: @@html:<kbd>@@M-s d@@html:</kbd>@@

** Package
    :PROPERTIES:
    :CUSTOM_ID: package
    :END:

#+ATTR_HTML: :style text-align:left
It's file-oriented, you can find more simpler and faster way to
implement almost functionalities that =use-pacakge= does and more.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :package
 (list :remove-unused nil
       :package-check-signature 'allow-unsigned
       :allowed t))
#+END_SRC

#+REVEAL: split
- =:remove-unused= whether remove the unused packages that be defined
  in =def-self-package-spec=
- =:package-check-signature= =nil= does not check signature when
  installing packages.
- =:allowed= =t= enabled, =nil= disabled

#+ATTR_HTML: :style text-align:left
The /user defined/ package spec locate in =(*self-packages*)=.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-packages*
 :put :doc
 (list
  :cond t
  :packages (list (when% (executable-find% "gnuplot")
                    'gnuplot-mode)
                  'markdown-mode
                  'multiple-cursors
                  (when-version% <= 24.3 'yasnippet)
                  'vlf)))

(*self-packages*
 :put :org
 (list
  :cond t
  :packages (flatten (list
                      (when% (executable-find% "latex")
                        '(auctex
                          cdlatex))
                      (when-version% <= 25 'ox-reveal)))))

(*self-packages*
 :put :vcs
 (list
  :cond (and (when-version% <= 24.4 t)
             (executable-find% "git"))
  :packages '(magit)
  :compile `(,(compile-unit% (emacs-home* "config/use-magit-autoload.el")))))

(*self-packages*
 :put :docker
 (list
  :cond (and (when-version% <= 24.4 t)
             (executable-find% "docker"))
  :packages '(dockerfile-mode)))

(*self-packages*
 :put :scheme
 (list
  :cond (and (when-version% <= 23.2 t)
             (or (executable-find% "racket")
                 (executable-find% "scheme")
                 (executable-find% "chicken")
                 (executable-find% "guile")))
  :packages  '(geiser)
  :compile `(,(compile-unit% (emacs-home* "config/use-geiser-autoload.el")))))

(*self-packages*
 :put :common-lisp
 (list
  :cond (executable-find% "sbcl")
  :packages '(slime)
  :compile `(,(compile-unit% (emacs-home* "config/use-slime-autoload.el")))))

(*self-packages*
 :put :java
 (list
  :cond (and (when-version% <= 25.1 t)
             (executable-find% "java"))
  :packages '(cider
              clojure-mode
              clojure-mode-extra-font-locking
              kotlin-mode)
  :compile `(,(compile-unit% (emacs-home* "config/use-cider.el") t)
             ,(compile-unit%
               (emacs-home* "config/use-cider-autoload.el") t))))

(*self-packages*
 :put :erlang
 (list
  :cond (executable-find% "erlc")
  :packages (list 'erlang
                  (when% (executable-find% "lfe")
                    'lfe-mode))
  :compile (list (when% (executable-find% "lfe")
                   (compile-unit%
                    (emacs-home* "config/use-lfe-autoload.el"))))))

(*self-packages*
 :put :lua
 (list
  :cond (executable-find% "lua")
  :packages '(lua-mode)
  :compile `(,(compile-unit% (emacs-home* "config/use-lua-autoload.el")))))

(*self-packages*
 :put :web
 (list
  :cond nil
  :packages (list 'htmlize
                  'js2-mode
                  (when-version% <= 25 'restclient)
                  (when-version% <= 24.3 'skewer-mode)
                  'web-mode
                  'x509-mode)))
#+END_SRC

#+REVEAL: split
- =:cond= decide whether to install =:packages= or compile =:compile=
- =:packages= a list of package names or tar file names
- =:compile= when installed packages, a list of files that should be
  compiled only or be loaded after been compiled

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
You can use any =Elisp= functions after the aboved keywords.
- =when-version%= macro checking the version of current Emacs at
  compile time.
- =executable-find%= macro checking the exising of the /executable/ at
  compile time.
- =compile-unit%= macro specify the compiling file to compile or
  compile then load.

** Indent
    :PROPERTIES:
    :CUSTOM_ID: indent
    :END:

#+ATTR_HTML: :style text-align:left
Avoiding a war. If /whitespace/ causes some trouble, you can swith to
@@html:<kbd>@@M-x whitespace-mode@@html:</kbd>@@ to find out.

#+REVEAL: split
#+BEGIN_SRC emacs-lisp
(*self-env-spec*
 :put :edit
 (list :tab-width 2
       :standard-indent 2
       :auto-save-default nil
       :disable-indent-tabs-mode '(c-mode-common-hook
                                   sh-mode-hook
                                   emacs-lisp-mode-hook)
       :narrow-to-region nil
       :allowed t))
#+END_SRC

#+REVEAL: split
- =:tab-width= default @@html:<kbd>@@C-h-v tab-width@@html:</kbd>@@
- =:auto-save-default= @@html:<kbd>@@C-h-v auto-save-default@@html:</kbd>@@
- =:disable-indent-tabs-mode= disble =indent-tabs-mode= in specified
  major modes
- =:narrow-to-region= =t= enabled, =nil= disabled
- =:allowed= =t= enabled, =nil= disabled

** File
    :PROPERTIES:
    :CUSTOM_ID: file
    :END:

#+ATTR_HTML: :style text-align:left
Using =dired= as a File Manager is awesome, same experiences on
Windows, Darwin and Linux.

*** ls Program

#+ATTR_HTML: :style text-align:left
For Windows, there are no built-in =ls= program, but you can install
GNU's =ls= via [[https://git-scm.com/downloads][Git-Bash]].

#+ATTR_HTML: :style text-align:left
For Darwin, let =dired= don't do stupid things.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/ido-dired-windows-gnu-ls.png][ido-dired]]

*** find Program

#+ATTR_HTML: :style text-align:left
On Windows, if GNU's =find= has already in your disk, and let Windows
stupid =find= or =findstr= program go away.  Don't =setq=
=find-program= on Windows, because =dired= can not differ the cases
between local and remote.

#+ATTR_HTML: :style text-align:left
Now, on Windows you can use @@html:<kbd>@@M-x find-dired@@html:</kbd>@@
or @@html:<kbd>@@M-x find-name-dired@@html:</kbd>@@

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/find-name-dired-on-windows.png][find-name-dired]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/find-name-dired-tramp-on-windows.png][find-name-dired via tramp]]

*** compress Program

#+ATTR_HTML: :style text-align:left
On Windows, there are no builtin =zip/unzip= program, but Emacs ship
with =minizip= program.  Although =minizip= without /recursive/
functionalities, but do some tricks with =minizip=, we can zip files
and directories with =minizip=, even export =org= to =odt=
[[https://en.wikipedia.org/wiki/OpenDocument][OpenDocument]]. And more [[https://www.7-zip.org/download.html][7-Zip standalone command version also be
supported]].

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
On Windows, there are logical bugs in =dired-aux.el=, We can not using
=Z= key compress or uncompress file to or from =.gz= or =.7z=. The
good news: if =gunzip= or =7za= installed we can do it now.

#+ATTR_HTML: :style text-align:left
You can using @@html:<kbd>@@c@@html:</kbd>@@ in =dired mode= compress
to =*.gz=, =*.7z= or =*.zip=. For some ancient Emacs24-,
@@html:<kbd>@@! zip x.zip ?@@html:</kbd>@@ to zip.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
It's headache when =default-file-name-coding-system= not equal with
=locale-coding-system= specifically on Windows. Even view archived
file in =arc-mode=, will display wrong encoded file names.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
On Windows, there are some encoding issues when
~default-file-name-coding-system~ not equal ~locale-coding-system~.
- display non-unicode encoded directory name or file name;
- insert non-unicode encoded directory;
- compress the files with with ~locale-coding-system~ filenames;
- ~dired-do-shell-command~ or ~dired-do-async-shell-command~;

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
The good news is the whole above issues had gone in this kit.

#+ATTR_HTML: :style text-align:left
For =.rar= archive, emacs really sucks.
- on Emacs 23.3.1, using =unrar-free= in =archive-rar-summarize=
  function, but on Emacs 26.1 using =lsar=, and those all had been
  hard coded in =arc-mode.el=.
- =7z l= output is not compatible with =lsar= and =unrar=.


#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-do-compress-to-zip-on-windows.png][dired-do-compress-to: zip]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-do-compress-to-7z-on-windows.png][dired-do-compress-to: 7z]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/archive-summarize-files-zip-on-windows.png][archive-summarize-files: zip]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/archive-summarize-files-7z-on-windows.png][archive-summarize-files: 7z]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/org-odt-export-to-odt-on-windows.png][org-odt-export-to-odt]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/dired-compress-file-suffixes-version-24lt.png][dired-compress-file-suffixes]]

** Editing
   :PROPERTIES:
   :CUSTOM_ID: editing
   :END:

*** Scratch
    :PROPERTIES:
    :CUSTOM_ID: edit-scratch
    :END:

New a *scratch* buffer or switch to the existing one.

*** Mark
   :PROPERTIES:
   :CUSTOM_ID: edit-mark
   :END:

#+ATTR_HTML: :style text-align:left
Provides the abilities to mark /symbol/, /filename/ and /line/ in
current buffer then you can @@html:<kbd>@@M-w@@html:</kbd>@@ the
marked part.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
Using =mark-sexp@= default mark whole Lisp /sexp/ or C /block/ at
point. If prefix N is non nil, then forward or backward to sexps
boundary, just like the builtin =mark-sexp= does.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
=mark-word@= default mark the whole word at point. If prefix N is non
nil, then forward or backword to word boundary, just like the builtin
=mark-word= does.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
=mark-defun@= more stable in variant programming modes than
`mark-defun'.

#+REVEAL: split
- @@html:<kbd>@@C-c m s@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-symbol.png][mark symbol at point]]
- @@html:<kbd>@@C-c m f@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-filename.png][mark filename at point]]
- @@html:<kbd>@@M-@@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-word.png][mark word at point]]
- @@html:<kbd>@@C-c m l@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-line.png][mark line at point]]
- @@html:<kbd>@@C-M-@@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-list.png][mark sexp at point]]
- @@html:<kbd>@@C-M h@@html:</kbd>@@ [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/mark-defun.png][mark defun at point]]

*** Tags
   :PROPERTIES:
   :CUSTOM_ID: edit-tags
   :END:

#+ATTR_HTML: :style text-align:left
Prefer =etags= program, because it works well on varied platforms. In
=(emacs-home* "config/tags.el")=, there are some handy functions to
create the tags for =Elisp= or =C= source code, such as
=make-emacs-source-tags=, =make-system-c-tags=, =mount-tags=, and
=unmount-tags=.

#+ATTR_HTML: :style text-align:left
Nore Emacs also supports [[http://ctags.sourceforge.net/][Exuberant Ctags]].

#+REVEAL: split
Using =mount-tags= to mount the specified tags file at first order of
=tags-table-list=. Or @@html:<kbd>@@C-u mount-tags@@html:</kbd>@@ to
mount tags file at the tail of =tags-table-list=. The =unmount-tags=
is the inverse of =mount-tags=.

#+REVEAL: split
- =make-emacs-source-tags=: make tags for Emacs' C and Lisp source code.
- =make-dir-tags=: make tags for specified directory.
- =cc*-make-system-tags=: make system C tags.

*** Clipboard
   :PROPERTIES:
   :CUSTOM_ID: edit-clipboard
   :END:

#+ATTR_HTML: :style text-align:left
In terminal, Emacs can not /copy to/ or /paste from/ system clipboard
when on Darwin or Linux. For such cases, we need external programs to
help us do the job. Now, Nore Emacs integrates this
functionalities, so we can use natural keys (such as
@@html:<kbd>@@C-w@@html:</kbd>@@, @@html:<kbd>@@C-y@@html:</kbd>@@) to
/copy to/ or /paste from/ system clipboard.

*** iSearch
   :PROPERTIES:
   :CUSTOM_ID: edit-isearch
   :END:

#+ATTR_HTML: :style text-align:left
There are no uniformed [[https://www.emacswiki.org/emacs/IncrementalSearch][isearch]] functionalites among in
=isearch-forward=, =isearch-backward= and
=isearch-forward-symbol-at-point=. Now, in Nore Emacs those
functionalites unified to two functions: =isearch-forward*= and
=isearch-backward*=.

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
In Nore Emacs, by default, =isearch-forward*= and =isearch-backward*=
 same with the built-in ones. Except we can search the text of
 activated *region*.  @@html:<kbd>@@C-s@@html:</kbd>@@ and
 @@html:<kbd>@@C-r@@html:</kbd>@@ will search forward or backward just
 like /vi/'s @@html:<kbd>@@*@@html:</kbd>@@ does. And more, searching
 =word=, =quoted string=, or =filename= forward or backword.

*** Open line
   :PROPERTIES:
   :CUSTOM_ID: edit-open-line
   :END:

#+ATTR_HTML: :style text-align:left
Emulates /vi/'s *o* and *O* command in Emacs, the built-in one
=open-line= or =split-line= do not indent accordingly the current
line. See [[https://www.emacswiki.org/emacs/OpenNextLine][Open Next Line]].

#+REVEAL: split
- @@html:<kbd>@@C-o@@html:</kbd>@@ =open-next-line=
- @@html:<kbd>@@C-M-o@@html:</kbd>@@ =open-previous-line=

*** Comment
   :PROPERTIES:
   :CUSTOM_ID: edit-comment
   :END:

#+ATTR_HTML: :style text-align:left
=comment-line= has stupid behaviors, that why =toggle-comment= had
been made.

#+REVEAL: split
- @@html:<kbd>@@C-x C-;@@html:</kbd>@@ =toggle-comment=

*** Kill
   :PROPERTIES:
   :CUSTOM_ID: edit-kill
   :END:

#+ATTR_HTML: :style text-align:left
=kill-whole-word= and =kill-whole-symbol= are frequently editing
commands when programming.

** Keys
   :PROPERTIES:
   :CUSTOM_ID: keys
   :END:

#+ATTR_HTML: :style text-align:left
Obey the defaults of Emacs' keymap.

*** Global keys

#+ATTR_HTML: :style text-align:left
Global for all Emacs' version.

#+REVEAL: split
- @@html:<kbd>@@M-/@@html:</kbd>@@ =hippie-expand=
- @@html:<kbd>@@C-c f f@@html:</kbd>@@ =find-file-at-point=
- @@html:<kbd>@@C-c b r@@html:</kbd>@@ =revert-buffer=
- @@html:<kbd>@@C-c b n@@html:</kbd>@@ =echo-buffer-name=
#+REVEAL: split
- @@html:<kbd>@@C-M-o@@html:</kbd>@@ =open-previous-line=
- @@html:<kbd>@@C-o@@html:</kbd>@@ =open-next-line=
#+REVEAL: split
- @@html:<kbd>@@C-c m s@@html:</kbd>@@: =mark-symbol@=
- @@html:<kbd>@@C-c m l@@html:</kbd>@@: =mark-line@=
- @@html:<kbd>@@C-c m f@@html:</kbd>@@: =mark-filename@=
- @@html:<kbd>@@C-c m d@@html:</kbd>@@: =mark-defun@=
#+REVEAL: split
- @@html:<kbd>@@C-s@@html:</kbd>@@: =isearch-forward*=
- @@html:<kbd>@@C-r@@html:</kbd>@@: =isearch-backward*=
#+REVEAL: split
- @@html:<kbd>@@M-s .@@html:</kbd>@@: =isearch-forward-symbol*=
- @@html:<kbd>@@M-s @@@html:</kbd>@@: =isearch-forward-word*=
- @@html:<kbd>@@M-s f@@html:</kbd>@@: =isearch-forward-file*=
- @@html:<kbd>@@M-s _@@html:</kbd>@@: =isearch-forward-quoted*=

*** Compatible keys

#+ATTR_HTML: :style text-align:left
Compatibled for ancient Emacs versions, compatible keys may not
avaiabled on ancient Emacs.

#+REVEAL: split
- @@html:<kbd>@@M-,@@html:</kbd>@@ =pop-tag-mark=
- @@html:<kbd>@@M-*@@html:</kbd>@@ =tags-loop-continue=
- @@html:<kbd>@@C-l@@html:</kbd>@@ =recenter-top-bottom=
- @@html:<kbd>@@C-c b l@@html:</kbd>@@ =linum-mode=
- @@html:<kbd>@@M-#@@html:</kbd>@@ =xref-find-references=

*** Featured keys

#+ATTR_HTML: :style text-align:left
The features provided by non-Emacs's packages, featured keys may not
avaiabled on ancient Emacs.

- @@html:<kbd>@@C-x v M@@html:</kbd>@@ =magit-status=

* Programming
  :PROPERTIES:
  :CUSTOM_ID: programming
  :END:

** Generic editing
   :PROPERTIES:
   :CUSTOM_ID: general-editing
   :END:

#+ATTR_HTML: :style text-align:left
Just introduce Nore Resonable Emacs improvements or extra editing
features.

** Lisp programming
   :PROPERTIES:
   :CUSTOM_ID: lisp-programming
   :END:

#+ATTR_HTML: :style text-align:left
Lisp programming in Emacs already good enough, if [[https://www.emacswiki.org/emacs/ParEdit][ParEdit]] installed
editing Lisp code more easy.

#+ATTR_HTML: :style text-align:left
[[https://github.com/slime/slime][slime]] is the best tool for Common Lisp programming.

#+ATTR_HTML: :style text-align:left
For Scheme programming, there are builtin minor modes: =gambit-mode=
for [[http://www.gambitscheme.org/wiki/index.php/Main_Page][Gambit]] Scheme system, and =chez-mode= for [[https://scheme.com][Chez]] Scheme system.

*** REPL
    :PROPERTIES:
    :CUSTOM_ID: list-programming-repl
    :END:

- =*slime-repl*=: @@html:<kbd>@@M-x slime@@html:</kbd>@@
- =*gambit*=: @@html:<kbd>@@M-x run-gambit@@html:</kbd>@@
- =*chez*=: @@html:<kbd>@@M-x run-chez@@html:</kbd>@@

** C programming
   :PROPERTIES:
   :CUSTOM_ID: c-programming
   :END:

#+ATTR_HTML: :style text-align:left
Now, we are in the cycle of editing, compiling, debugging.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-editing-on-darwin-gui.png][editing on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-darwin.png][debugging via lldb on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-linux.png][debugging via lldb on Ubuntu]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-cdb-on-windows.png][debugging via cdb]]

*** Editing
    :PROPERTIES:
    :CUSTOM_ID: c-programming-editing
    :END:

#+ATTR_HTML: :style text-align:left
Change C programming style using @@html:<kbd>@@C-c .@@html:</kbd>@@.
And there is a new elegant and practical style: =cc*-style-nginx=.

#+REVEAL: split
**** View C system include
     :PROPERTIES:
     :CUSTOM_ID: c-programming-view-c-system-include
     :END:

#+ATTR_HTML: :style text-align:left
Like /vi/'s @@html:<kbd>@@gf@@html:</kbd>@@ command, you can using
@@html:<kbd>@@C-c f i@@html:</kbd>@@ to open C system include file on
local or remote in =view-mode= and via
@@html:<kbd>@@M-,@@html:</kbd>@@ to go back. It supports /gcc/,
/clang/, and /msvc/.

#+ATTR_HTML: :style text-align:left
On Darwin, you can find correct include path in =Man-mode= now.

#+REVEAL: split
**** Macro expand
     :PROPERTIES:
     :CUSTOM_ID: c-programming-macro-expand
     :END:

#+ATTR_HTML: :style text-align:left
Mark the code that include a macro call then @@html:<kbd>@@C-c
C-e@@html:</kbd>@@, you should see the expansion of the macro in
=*Macro Expanded*=, whatever you are using /gcc/, /clang/ and /msvc/,
locally or remotely.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-macro-expansion-on-windows.png][macro expansion for msvc]]

#+REVEAL: split
#+ATTR_HTML: :style text-align:left
**** Dump predefined macros
     :PROPERTIES:
     :CUSTOM_ID: c-programming-dump-predefined-macros
     :END:

#+ATTR_HTML: :style text-align:left
Dump compiler predefined macros, @@html:<kbd>@@C-c #@@html:</kbd>@@,
you should see the predefined macros in =*Macros Predefined*=,
whatever you are using /gcc/ and /clang/ locally or remotely.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-dump-predefined-macros.png][dump predefined macros for clang]]

*** Compiling
    :PROPERTIES:
    :CUSTOM_ID: c-programming-compiling
    :END:

#+ATTR_HTML: :style text-align:left
Using @@html:<kbd>@@M-x compile@@html:</kbd>@@ to /build/ or /test/.

#+ATTR_HTML: :style text-align:left
For /msvc/ there are need tricks to works with Emacs. Nore Emacs will
generate a /msvc/'s host environment =cc-env.bat= for you that make
life easy and if [[https://github.com/junjiemars/nore][Nore]] already on your machine, now life is perfect.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-compile-on-windows.png][compile via msvc]]

*** Debugging
    :PROPERTIES:
    :CUSTOM_ID: c-programming-debugging
    :END:

#+ATTR_HTML: :style text-align:left
[[https://lldb.llvm.org/][lldb]] and [[https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/][cdb]] had been perfectly integrated.

#+ATTR_HTML: :style display:none
/screenshots/:
#+ATTR_HTML: :style display:none
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-darwin.png][debugging via lldb on Darwin]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-lldb-on-linux.png][debugging via lldb on Ubuntu]]
- [[https://raw.githubusercontent.com/junjiemars/images/master/.emacs.d/c-programming-debugging-via-cdb-on-windows.png][debugging via cdb]]

* Troubleshoting
   :PROPERTIES:
   :CUSTOM_ID: troubleshoting
   :END:

#+REVEAL: split
- I. @@html:<kbd>@@M-x clean-compiled-files@@html:</kbd>@@ then exit
   and reopen Emacs.
#+REVEAL: split
- II. Check Emacs configurations:
  - @@html:<kbd>@@M: system-configuration-options@@html:</kbd>@@
  - @@html:<kbd>@@M: system-configuration-features@@html:</kbd>@@
  - @@html:<kbd>@@M: features@@html:</kbd>@@
  - @@html:<kbd>@@M: load-history@@html:</kbd>@@
  then do =I=.
#+REVEAL: split
- III. Check =*Compilation-Log*= buffer, then do =I=.
- IV. Check =(*self-paths*)=, then do =I=.
- V. Disable the problematic item in =(*self-env-spec*)=, then do =I=.
- VI. Disable the problematic item in =(*self-packages*)=, then do =I=.

* Mnemonic
  :PROPERTIES:
  :CUSTOM_ID: mnemonic
  :END:

#+ATTR_HTML: :style display:none
- [[#emacs-documents][Emacs Documents]]
- [[#motion][Motion]]
- [[#interaction][Interaction]]
- [[#editing][Editing]]
- [[#coding-system][Coding system]]
- [[#basic-sexp-commands][Basic sexp commands]]
- [[#frame][Frame]]
- [[#window][Window]]
- [[#register][Register]]
- [[#bookmark][Bookmark]]
- [[#rectangle][Rectangle]]
- [[#keyboard-macro][Keyboard Macro]]
- [[#dired][Dired]]
- [[#mnemonic-shell][Shell]]
- [[#remote][Remote]]
- [[#sort][Sort]]
- [[#face][Face]]
- [[#log][Log]]
- [[#latex][LaTeX]]

** Emacs Documents
   :PROPERTIES:
   :CUSTOM_ID: emacs-documents
   :END:

#+ATTR_HTML: :style text-align:left
It's *self-documenting* and great, keep reading it frequently.

- Tutorial: @@html:<kbd>@@C-h-t@@html:</kbd>@@
- Help for Help: @@html:<kbd>@@C-h C-h@@html:</kbd>@@
- Emacs manual: @@html:<kbd>@@C-h r@@html:</kbd>@@
- Apropos command: @@html:<kbd>@@C-h a@@html:</kbd>@@
- Mode: @@html:<kbd>@@C-h-m@@html:</kbd>@@ see all the key bindings and
  documentation of current buffer

#+REVEAL: split
- Info: @@html:<kbd>@@C-h i@@html:</kbd>@@
- Info /file/: @@html:<kbd>@@C-u C-h i <where>@@html:</kbd>@@
- Index of /topic/: @@html:<kbd>@@C-h r i @@html:</kbd>@@

#+REVEAL: split
- Function: @@html:<kbd>@@C-h f@@html:</kbd>@@ display documentation
  of the given function
- Variable: @@html:<kbd>@@C-h v@@html:</kbd>@@ display documentation
  of the given variable
- Keybinding: @@html:<kbd>@@C-h k@@html:</kbd>@@ display documentation
  of the function invoked by the given keystrokes
- Keybinding briefly: @@html:<kbd>@@C-h c@@html:</kbd>@@, which command
  for given keystroke

#+REVEAL: split
- Prefix keybindings: press prefix keys such as
  @@html:<kbd>@@C-c@@html:</kbd>@@ then
  @@html:<kbd>@@C-h@@html:</kbd>@@ to see all key bindings for given
  prefix keystrokes

#+REVEAL: split
- Message: @@html:<kbd>@@C-h e@@html:</kbd>@@ see the logging of echo
  area message
- Man: @@html:<kbd>@@M-x man@@html:</kbd>@@ view UNIX manual page
- Woman: @@html:<kbd>@@M-x woman@@html:</kbd>@@ view UNIX manual page
  without =man= program

#+REVEAL: split
- Coding system: @@html:<kbd>@@C-h C@@html:</kbd>@@ describe coding
  system
- Colors: @@html:<kbd>@@M-x list-colors-display@@html:</kbd>@@ display
  names of defined colors and show what they look like
- Syntax: @@html:<kbd>@@C-h s@@html:</kbd>@@ describe syntax
- Where is command: @@html:<kbd>@@C-h w@@html:</kbd>@@ which keystrokes
  binding to a given command
- Keystrokes: @@html:<kbd>@@C-h l@@html:</kbd>@@ display last 100
  input keystrokes

** Motion
   :PROPERTIES:
   :CUSTOM_ID: motion
   :END:

#+REVEAL: split
- goto line: @@html:<kbd>@@M-g g@@html:</kbd>@@
- goto nth char: @@html:<kbd>@@M-g c@@html:</kbd>@@
- goto next error: @@html:<kbd>@@C-x `@@html:</kbd>@@
- goto previous error: @@html:<kbd>@@M-g p@@html:</kbd>@@

#+REVEAL: split
- jump between buffers: @@html:<kbd>@@C-x C-SPC@@html:</kbd>@@, jumps to
  the global mark acrross buffers
- jump in buffer: @@html:<kbd>@@C-u C-SPC@@html:</kbd>@@
- jump to definition: @@html:<kbd>@@M-.@@html:</kbd>@@
- pop back to where @@html:<kbd>@@M-,@@html:</kbd>@@

** Interaction
   :PROPERTIES:
   :CUSTOM_ID: interaction
   :END:

- =*scratch*= buffer
- eval /Elisp/: @@html:<kbd>@@M-:@@html:</kbd>@@
- execute /Shell/ command: @@html:<kbd>@@M-!@@html:</kbd>@@
- in Dired mode: @@html:<kbd>@@!@@html:</kbd>@@, do shell command
- region as input to Shell command: @@html:<kbd>@@M-|@@html:</kbd>@@,

#+REEVAL: split
- insert from shell output: @@html:<kbd>@@C-u M-!@@html:</kbd>@@
- insert from elisp output: @@html:<kbd>@@C-u M-:@@html:</kbd>@@

#+REVEAL: split
- find file at point: @@html:<kbd>@@C-c f f@@html:</kbd>@@
- filename of current buffer: @@html:<kbd>@@C-c b n@@html:</kbd>@@

#+REVAL: split
- lookup /web/ at point: @@html:<kbd>@@M-s w@@html:</kbd>@@
- lookup /dict/ at point: @@html:<kbd>@@M-s d@@html:</kbd>@@

#+REVAL: split
- display time: @@html:<kbd>@@M-x display-time@@html:</kbd>@@

** Editing
   :PROPERTIES:
   :CUSTOM_ID: editing
   :END:

- write file: @@html:<kbd>@@C-x C-w@@html:</kbd>@@ same as save as
- kill all spaces at point: @@html:<kbd>@@M-\@@html:</kbd>@@
- kill all spaces except one at point: @@html:<kbd>@@M-SPC@@html:</kbd>@@
- delete indentation to join line to previous line:
  @@html:<kbd>@@M-^@@html:</kbd>@@
- join next line: @@html:<kbd>@@C-u 1 M-^@@html:</kbd>@@

#+REVAL: split
- kill word: @@html:<kbd>@@M-d@@html:</kbd>@@
- kill /whole word/: @@html:<kbd>@@C-x M-d@@html:</kbd>@@, include the
  word that current point located.
- kill /whole symbol/: @@html:<kbd>@@C-x M-s@@html:</kbd>@@, include
  the symbol that current point located.
- kill /line/: @@html:<kbd>@@C-k@@html:</kbd>@@
- kill /whole/ line: @@html:<kbd>@@C-x M-<backspace>@@html:</kbd>@@

#+REVEAL: split
- query replace: @@html:<kbd>@@M-%@@html:</kbd>@@
- upcase region: @@html:<kbd>@@C-x C-u@@html:</kbd>@@
- downcase region: @@html:<kbd>@@C-x C-l@@html:</kbd>@@

#+REVEAL: split
- transpose characters: @@html:<kbd>@@C-t@@html:</kbd>@@
- transpose words: @@html:<kbd>@@M-t@@html:</kbd>@@
- transpose lines: @@html:<kbd>@@C-x C-t@@html:</kbd>@@

#+REVEAL: split
- toggle read-only mode: @@html:<kbd>@@C-x C-q@@html:</kbd>@@
- toggle input method: @@html:<kbd>@@C-\@@html:</kbd>@@
- set input method: @@html:<kbd>@@C-x RET C-\@@html:</kbd>@@
- describe current input method: @@html:<kbd>@@C-h I@@html:</kbd>@@

#+REVEAL: split
- insert char: @@html:<kbd>@@C-x 8 RET@@html:</kbd>@@ GREEK SMALL LETTER LAMBDA
- what cursor position: @@html:<kbd>@@C-x =@@html:</kbd>@@
- describe char: @@html:<kbd>@@C-u C-x =@@html:</kbd>@@
- quoted insert: @@html:<kbd>@@C-q@@html:</kbd>@@, such as page break
  @@html:<kbd>@@C-q C-l@@html:</kbd>@@, use @@html:<kbd>@@C-x
  [@@html:</kbd>@@ to backward or @@html:<kbd>@@C-x ]@@html:</kbd>@@
  to forward,
  @@html:<kbd>@@C-q C-I@@html:</kbd>@@ to insert horizontal tab,
  @@html:<kbd>@@C-q C-J@@html:</kbd>@@ to insert line feed,
  @@html:<kbd>@@C-q C-M@@html:</kbd>@@ to insert carriage return
- check unmatched parentheses: @@html:<kbd>@@M-x check-parens@@html:</kbd>@@

#+REVEAL: split
- tab to space: @@html:<kbd>@@M-x untabify@@html:</kbd>@@
- space to tab: @@html:<kbd>@@M-x tabify@@html:</kbd>@@
- fill paragraph: @@html:<kbd>@@M q@@html:</kbd>@@
- redo after undo: @@html:<kbd>@@C-g@@html:</kbd>@@ and then
  @@html:<kbd>@@C-x u@@html:</kbd>@@
- cancel: @@html:<kbd>@@C-]@@html:</kbd>@@, or @@html:<kbd>@@M-x
  top-level@@html:</kbd>@@

#+REVEAL: split
- open new line before current: @@html:<kbd>@@C-o@@html:</kbd>@@
- remove all but one empty line: @@html:<kbd>@@C-x C-o@@html:</kbd>@@
- delete entire line: @@html:<kbd>@@C-S-DEL@@html:</kbd>@@
- delete to end of sentence: @@html:<kbd>@@M-k@@html:</kbd>@@
- insert char: @@html:<kbd>@@C-x 8 RET@@html:</kbd>@@
- count lines, words or characters of select region:
  @@html:<kbd>@@M-=@@html:</kbd>@@
- count lines on current page: @@html:<kbd>@@C-x l@@html:</kbd>@@

#+REVEAL: split
- toggle comment the current line or region: @@html:<kbd>@@C-x
  M-;@@html:</kbd>@@. =toggle-comment= more better than sucked
  =comment-line=.
- insert or realign comment on current line:
  @@html:<kbd>@@M-;@@html:</kbd>@@
- kill comment on current line: @@html:<kbd>@@C-u M-;@@html:</kbd>@@
- indent and continuing comment: @@html:<kbd>@@C-M-j@@html:</kbd>@@

#+REVEAL: split
- dynamic abbreviation: @@html:<kbd>@@M-/@@html:</kbd>@@
- flush lines: @@html:<kbd>@@M-x flush-lines@@html:</kbd>@@
- insert parentheses: @@html:<kbd>@@M-(@@html:</kbd>@@, wrap selection
  in parentheses

#+REVEAL: split
- align region: @@html:<kbd>@@M-x align-entire@@html:</kbd>@@

** Coding system
   :PROPERTIES:
   :CUSTOM_ID: coding-system
   :END:

#+REVEAL: split
- check current buffer coding system: @@html:<kbd>@@C-x RET
  =@@html:</kbd>@@
- revert current buffer's coding system: @@html:<kbd>@@C-x RET
  r@@html:</kbd>@@
- specify coding system for the current buffer: @@html:<kbd>@@C-x RET
  f@@html:</kbd>@@
#+REVEAL: split
- specify coding system for terminal output: @@html:<kbd>@@C-x RET
  t@@html:</kbd>@@
- specify coding system for keyboard input: @@html:<kbd>@@C-x RET
  k@@html:</kbd>@@
- specify coding system for the immediately following command:
  @@html:<kbd>@@C-x RET c@@html:</kbd>@@
#+REVEAL: split
- specify input and output coding systems for subprocess:
  @@html:<kbd>@@C-x RET p@@html:</kbd>@@
- specify coding system for transferring selections to and from other
  programs through the window system: @@html:<kbd>@@C-x RET
  x@@html:</kbd>@@
- specify coding system for transferring one selection to or from the
  window system: @@html:<kbd>@@C-x RET X@@html:</kbd>@@

** Basic sexp commands
   :PROPERTIES:
   :CUSTOM_ID: basic-sexp-commands
   :END:

-  =forward-sexp=: @@html:<kbd>@@C-M-f@@html:</kbd>@@
-  =backward-sexp=: @@html:<kbd>@@C-M-b@@html:</kbd>@@
-  =kill-sexp=: @@html:<kbd>@@C-M-k@@html:</kbd>@@, delete forward one sexp
-  =transpose-sexp=: @@html:<kbd>@@C-M-t@@html:</kbd>@@
-  =backward-up-list=: @@html:<kbd>@@C-M-u@@html:</kbd>@@, move up out of an sexp
-  =down-list=: @@html:<kbd>@@C-M-d@@html:</kbd>@@, move down into a nested sexp
-  =backward-list=: @@html:<kbd>@@C-M-p@@html:</kbd>@@, match parentheses backward
-  =pp-eval-last-sexp=: pretty print

** Frame
   :PROPERTIES:
   :CUSTOM_ID: frame
   :END:

-  find file other frame: @@html:<kbd>@@C-x 5 C-f@@html:</kbd>@@, or
   @@html:<kbd>@@C-x 5 f@@html:</kbd>@@
-  display buffer other frame: @@html:<kbd>@@C-x 5 C-o@@html:</kbd>@@,
   or @@html:<kbd>@@C-x 5 b@@html:</kbd>@@
-  find tag other frame: @@html:<kbd>@@C-x 5 .@@html:</kbd>@@
-  delete frame: @@html:<kbd>@@C-x 5 0@@html:</kbd>@@
-  delete other frames: @@html:<kbd>@@C-x 5 1@@html:</kbd>@@
-  make frame command: @@html:<kbd>@@C-x 5 2@@html:</kbd>@@
-  dired to other frame: @@html:<kbd>@@C-x 5 d@@html:</kbd>@@
-  other frame: @@html:<kbd>@@C-x 5 o@@html:</kbd>@@
-  find file read only other frame: @@html:<kbd>@@C-x 5 r@@html:</kbd>@@

** Window
   :PROPERTIES:
   :CUSTOM_ID: window
   :END:

#+REVEAL: split
- /find/ file: @@html:<kbd>@@C-x C-f@@html:</kbd>@@
- /view/ file: @@html:<kbd>@@C-x C-v@@html:</kbd>@@
- /write/ file: @@html:<kbd>@@C-x C-w@@html:</kbd>@@

#+REVEAL: split
- save /current/ buffer: @@html:<kbd>@@C-x s@@html:</kbd>@@
- save all /modified/ buffers: @@html:<kbd>@@C-u C-x s@@html:</kbd>@@
- save and /backup/ current buffer: @@html:<kbd>@@C-x C-s@@html:</kdb>@@

#+REVEAL: split
- kill a buffer: @@html:<kbd>@@C-x k@@html:</kbd>@@
- other window: @@html:<kbd>@@C-x o@@html:</kbd>@@
- dired other window: @@html:<kbd>@@C-x 4 d@@html:</kbd>@@
- find file in other window: @@html:<kbd>@@C-x 4 C-f@@html:</kbd>@@, or
  @@html:<kbd>@@C-x 4 f@@html:</kbd>@@

#+REVEAL: split
- display buffer: @@html:<kbd>@@C-x 4 C-o@@html:</kbd>@@, display the
  buffer in another window
- find tag other window: @@html:<kbd>@@C-x 4 .@@html:</kbd>@@
- kill buffer and window: @@html:<kbd>@@C-x 4 0@@html:</kbd>@@, just
  like @@html:<kbd>@@C-x 0@@html:</kbd>@@ except kill the buffer

#+REVEAL: split
- switch to buffer other window: @@html:<kbd>@@C-x 4 b@@html:</kbd>@@
- clone indirect buffer other window:
  @@html:<kbd>@@C-x 4 c@@html:</kbd>@@, clone the buffer in another window
- recenter the screen at cursor: @@html:<kbd>@@C-l@@html:</kbd>@@
- center the screen at the top: @@html:<kbd>@@C-u 0 C-l@@html:</kbd>@@
- recenter the screen at the bottom: @@html:<kbd>@@C-u - C-l@@html:</kbd>@@

** Register
   :PROPERTIES:
   :CUSTOM_ID: register
   :END:

#+ATTR_HTML: :style text-align:left
- store /window/ configuration to register: @@html:<kbd>@@C-x r w
  <REG>@@html:</kbd>@@, but the configuration cannot accross sessions.
- store /frame/ configuration to register: @@html:<kbd>@@C-x r f
  <REG>@@html:</kbd>@@
- store /region/ into register: @@html:<kbd>@@C-x r s
  <REG>@@html:</kbd>@@
- store current /point/ in register: @@html:<kbd>@@C-x r SPC
  <REG>@@html:</kbd>@@

#+REVEAL: split
- /jump to/ register: @@html:<kbd>@@C-x r j <REG>@@html:</kbd>@@
- /insert from/ register: @@html:<kbd>@@C-x r i <REG>@@html:</kbd>@@
- /view/ the content of register: @@html:<kbd>@@M-x view-register
  <REG>@@html:</kbd>@@

** Bookmark
   :PROPERTIES:
   :CUSTOM_ID: bookmark
   :END:

#+ATTR_HTML: :style text-align:left
Unlike registers, bookmarks have long names, and they persist
automatically from one Emacs session to the next.

- set bookmark: @@html:<kbd>@@C-x r m@@html:</kbd>@@
- set named bookmark: @@html:<kbd>@@C-x r m BOOKMARK@@html:</kbd>@@
- jump to bookmark: @@html:<kbd>@@C-x r b BOOKMARK@@html:</kbd>@@
- list all bookmarks: @@html:<kbd>@@C-x r l@@html:</kbd>@@
- save bookmark to file: @@html:<kbd>@@M-x bookmark-save@@html:</kbd>@@

** Rectangle
   :PROPERTIES:
   :CUSTOM_ID: rectangle
   :END:

- /kill/ rectangle: @@html:<kbd>@@C-x r k@@html:</kbd>@@
- /delete/ rectangle: @@html:<kbd>@@C-x r d@@html:</kbd>@@
- /yank/ rectangle: @@html:<kbd>@@C-x r y@@html:</kbd>@@
- /open/ rectangle: @@html:<kbd>@@C-x r o@@html:</kbd>@@, insert blank
  /space/ to fill the space of the region-rectangle
- /copy/ rectangle: @@html:<kbd>@@C-x r M-w@@html:</kbd>@@
- /clear/ rectangle: @@html:<kbd>@@C-x r c@@html:</kbd>@@

#+REVEAL: split
- /replace/ rectangle: @@html:<kbd>@@C-x r t@@html:</kbd>@@
- /string insert/ rectangle: @@html:<kbd>@@C-x r g@@html:</kbd>@@
- /numbers insert/ rectangle: @@html:<kbd>@@C-x r N@@html:</kbd>@@

#+REVAL: split
- select entire buffer: @@html:<kbd>@@C-x h@@html:</kbd>@@
- select page: @@html:<kbd>@@C-x C-p@@html:</kbd>@@
- exchange cursor position and mark: @@html:<kbd>@@C-x C-x@@html:</kbd>@@

** Keyboard Macro
   :PROPERTIES:
   :CUSTOM_ID: keyboard-macro
   :END:

- /start/ recording macro: @@html:<kbd>@@C-x (@@html:</kbd>@@
- /stop/ recording macro: @@html:<kbd>@@C-x )@@html:</kbd>@@
- /playback/ macro: @@html:<kbd>@@C-x e@@html:</kbd>@@
- apply macro to /region/: @@html:<kbd>@@C-x C-k r@@html:</kbd>@@
- /edit/ last marcro: @@html:<kbd>@@C-x C-k RET@@html:</kbd>@@
- /bind/ the most recent macro to a key: @@html:<kbd>@@C-x C-k b
  [1-9A-Z]@@html:</kbd>@@

** Dired
   :PROPERTIES:
   :CUSTOM_ID: dired
   :END:

#+REVEAL: split
- hide details: @@html:<kbd>@@(@@html:</kbd>@@
- change marks: @@html:<kbd>@@* c @@html:</kbd>@@
- toggle readonly: @@html:<kbd>@@C-x C-q@@html:</kbd>@@
- finish edit: @@html:<kbd>@@C-c C-c@@html:</kbd>@@
- abort editing: @@html:<kbd>@@C-c C-k@@html:</kbd>@@

#+REVEAL: split
- browse file: @@html:<kbd>@@b@@html:</kbd>@@
- echo current directory: @@html:<kbd>@@W@@html:</kbd>@@
- hex edit file: @html:<kbd>@@f@@html:</kbd>@@

#+REVEAL: split
- /find/ regexp recusive: @@html:<kbd>@@A@@html:</kbd>@@
- /replace/ regexp recusive: @@html:<kbd>@@Q@@html:</kbd>@@

** Regexp
   :PROPERTIES:
   :CUSTOM_ID: regexp
   :END:

- regexp builder: @@html:<kbd>@@M-x regexp-builder@@html:</kbd>@@

** Shell
   :PROPERTIES:
   :CUSTOM_ID: mnemonic-shell
   :END:

- EShell: @@html:<kbd>@@M-x eshell@@html:</kbd>@@
- Shell: @@html:<kbd>@@M-x shell@@html:</kbd>@@
- Ansi-Term: @@html:<kbd>@@M-x ansi-term@@html:</kbd>@@

#+REVAL: split
- interrupt process in =eshell=: @@html:<kbd>@@C-c C-c@@html:</kbd>@@
- interrupt process in =shell=: @@html:<kbd>@@C-c C-c@@html:</kbd>@@
- interrupt process in =ansi-term=: @@html:<kbd>@@C-x C-c@@html:</kbd>@@

** Remote
   :PROPERTIES:
   :CUSTOM_ID: remote
   :END:

#+ATTR_HTML: :style text-align:left
It's the duty of [[https://www.gnu.org/software/tramp/][TRAMP]].

- non-sudo: @@html:<kbd>@@C-x C-f
  /ssh:user@host:/path/to/file@@html:</kbd>@@, such as =user@host= or
  =user= in .ssh/config entries.
- sudo /remote/: @@html:<kbd>@@C-x C-f
  /ssh:user|sudo::/path/to/file@@html:</kbd>@@
- sudo /localhost/: @@html:<kbd>@@C-x C-f
  /sudo::/path/to/file@@html:</kbd>@@
#+REVEAL: split
- eshell remote: @@html:<kbd>@@cd
  /ssh:user@host:/path/to/file@@html:</kbd>@@
- on Windows use =~/.ssh/config=: use =/sshx:= instead, such as
  @@html:<kbd>@@/sshx:user@host:/path/to/file@@html:</kbd>@@

** Sort
   :PROPERTIES:
   :CUSTOM_ID: sort
   :END:

- sort /fields/: @@html:<kbd>@@C-c s f@@html:</kbd>@@ by Nth field
- sort /numeric/ fields: @@html:<kbd>@@C-c s n@@html:</kbd>@@ by Nth numeric field
- sort /lines/: @@html:<kbd>@@C-c s l@@html:</kbd>@@
- sort /regexp/ fields: @@html:<kbd>@@C-c s x@@html:</kbd>@@ by regexp field
- /reverse/ region: @@html:<kbd>@@C-c s r@@html:</kbd>@@
- delete /duplicated/ lines: @@html:<kbd>@@C-c s d@@html:</kbd>@@

** Face
   :PROPERTIES:
   :CUSTOM_ID: face
   :END:

- describe the face at point: @@html:<kbd>@@M-x
  describe-face@@html:</kbd>@@

#+ATTR_HTML: :style text-align:left
*** Text scale
- reset face height: @@html:<kbd>@@C-x C-0@@html:</kbd>@@
- increase face height: @@html:<kbd>@@C-x C-=@@html:</kbd>@@
- decrease face height: @@html:<kbd>@@C-x C--@@html:</kdd>@@

** Log
   :PROPERTIES:
   :CUSTOM_ID: log
   :END:

- =tail -f=: @@html:<kbd>@@M-x auto-revert-tail-mode@@html:</kbd>@@
- toggle highlighting of the current line: @@html:<kbd>@@M-x
  hl-line-mode@@html:</kbd>@@
- highlight all lines matching a regexp: @@html:<kbd>@@M-s h
  l@@html:</kbd>@@, and @@html:<kbd>@@M-s h u@@html:</kbd>@@ to
  unhighlight.
- /narrow/ region: @@html:<kbd>@@C-x n n@@html:</kdb>@@
- /widen/ region: @@html:<kbd>@@C-x n w@@html:</kbd>@@

** LaTeX
   :PROPERTIES:
   :CUSTOM_ID: latex
   :END:

*** Requirements
**** On Darwin
- [[https://www.imagemagick.org/][ImageMagick]]
- texlive-basic
- texlive-fonts-recommended
- texlive-latex-extra
- texlive-latex-recommended
- texlive-pictures
- texlive-plain-generic
- texlive-lang-cjk

**** On Ubuntu
- [[https://www.imagemagick.org/][ImageMagick]]
- [[https://www.tug.org/texlive/][texlive]]
- texlive-latex-extra: additional packages.
- texlive-lang-cjk: supporting a combination of Chinese, Japanese,
  Korean, including macros, fonts, documentation.
- texlive-xetex

**** On Windows
- [[https://www.imagemagick.org/][ImageMagick]]
- MiKTex

** Aspell
   :PROPERTIES:
   :CUSTOM_ID: aspell
   :END:

*** Requirements

**** On Darwin

- aspell
- aspell-dict-en

* Issues?

If you have issues, just post it.
